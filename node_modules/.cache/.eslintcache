[{"/Applications/MAMP/htdocs/Marvel/src/index.js":"1","/Applications/MAMP/htdocs/Marvel/src/services/MarvelService.js":"2","/Applications/MAMP/htdocs/Marvel/src/components/app/App.js":"3","/Applications/MAMP/htdocs/Marvel/src/components/appHeader/AppHeader.js":"4","/Applications/MAMP/htdocs/Marvel/src/components/charList/CharList.js":"5","/Applications/MAMP/htdocs/Marvel/src/components/randomChar/RandomChar.js":"6","/Applications/MAMP/htdocs/Marvel/src/components/spinner/Spinner.js":"7","/Applications/MAMP/htdocs/Marvel/src/components/errorMessage/ErrorMessage.js":"8","/Applications/MAMP/htdocs/Marvel/src/components/skeleton/Skeleton.js":"9","/Applications/MAMP/htdocs/Marvel/src/components/charInfo/CharInfo.jsx":"10","/Applications/MAMP/htdocs/Marvel/src/components/errorBoundary/ErrorBoundary.js":"11"},{"size":243,"mtime":1656339880044,"results":"12","hashOfConfig":"13"},{"size":1210,"mtime":1656413159866,"results":"14","hashOfConfig":"13"},{"size":1304,"mtime":1656417260331,"results":"15","hashOfConfig":"13"},{"size":559,"mtime":1629625707000,"results":"16","hashOfConfig":"13"},{"size":3974,"mtime":1656496309611,"results":"17","hashOfConfig":"13"},{"size":3458,"mtime":1656344076217,"results":"18","hashOfConfig":"13"},{"size":4551,"mtime":1656059816537,"results":"19","hashOfConfig":"13"},{"size":241,"mtime":1656063638937,"results":"20","hashOfConfig":"13"},{"size":666,"mtime":1629627051000,"results":"21","hashOfConfig":"13"},{"size":3554,"mtime":1656411313417,"results":"22","hashOfConfig":"13"},{"size":408,"mtime":1656343887067,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1k1ihir",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Applications/MAMP/htdocs/Marvel/src/index.js",[],"/Applications/MAMP/htdocs/Marvel/src/services/MarvelService.js",[],"/Applications/MAMP/htdocs/Marvel/src/components/app/App.js",[],"/Applications/MAMP/htdocs/Marvel/src/components/appHeader/AppHeader.js",["48","49","50"],"import './appHeader.scss';\n\nconst AppHeader = () => {\n    return (\n        <header className=\"app__header\">\n            <h1 className=\"app__title\">\n                <a href=\"#\">\n                    <span>Marvel</span> information portal\n                </a>\n            </h1>\n            <nav className=\"app__menu\">\n                <ul>\n                    <li><a href=\"#\">Characters</a></li>\n                    /\n                    <li><a href=\"#\">Comics</a></li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default AppHeader;","/Applications/MAMP/htdocs/Marvel/src/components/charList/CharList.js",["51"],"import React from 'react';\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport MarvelService from '../../services/MarvelService';\nimport './charList.scss';\nimport CharInfo from '../charInfo/CharInfo';\n\nclass CharList extends Component {\n\n    state = {\n        charList: [],\n        loading: true,\n        error: false,\n        newItemLoading: false,\n        offset: 210,\n        charEnded: false,\n    }\n    \n    marvelService = new MarvelService();\n\n    componentDidMount() {\n        this.onRequest();\n    }\n\n    onRequest = (offset) => {\n        this.onCharListLoading();\n        this.marvelService.getAllCharacters(offset)\n            .then(this.onCharListLoaded)\n            .catch(this.onError)\n    }\n\n    onCharListLoading = () => {\n        this.setState({\n            newItemLoading: true\n        })\n    }\n\n    onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        this.setState(({offset, charList}) => ({\n            charList: [...charList, ...newCharList],\n            loading: false,\n            newItemLoading: false,\n            offset: offset + 9,\n            charEnded: ended\n        }))\n    }\n\n    onError = () => {\n        this.setState({\n            error: true,\n            loading: false\n        })\n    }\n\n    itemRefs = [];\n\n    setRef = (ref) => {\n        this.itemRefs.push(ref);\n    }\n\n    focusOnItem = (id) => {\n        this.itemRefs.forEach(item => item.classList.remove('char__item_selected'));\n        this.itemRefs[id].classList.add('char__item_selected');\n        this.itemRefs[id].focus();\n    }\n\n    renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={this.setRef}\n                    key={item.id}\n                    onClick={() => {\n                        this.props.onCharSelected(item.id);\n                        this.focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            this.props.onCharSelected(item.id);\n                            this.focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        \n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    render() {\n\n        const {charList, loading, error, offset, newItemLoading, charEnded} = this.state;\n        \n        const items = this.renderItems(charList);\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? items : null;\n\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <button \n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{'display': charEnded ? 'none' : 'block'}}\n                    onClick={() => this.onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    }\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","/Applications/MAMP/htdocs/Marvel/src/components/randomChar/RandomChar.js",[],"/Applications/MAMP/htdocs/Marvel/src/components/spinner/Spinner.js",[],"/Applications/MAMP/htdocs/Marvel/src/components/errorMessage/ErrorMessage.js",[],"/Applications/MAMP/htdocs/Marvel/src/components/skeleton/Skeleton.js",[],"/Applications/MAMP/htdocs/Marvel/src/components/charInfo/CharInfo.jsx",[],"/Applications/MAMP/htdocs/Marvel/src/components/errorBoundary/ErrorBoundary.js",[],{"ruleId":"52","severity":1,"message":"53","line":7,"column":17,"nodeType":"54","endLine":7,"endColumn":29},{"ruleId":"52","severity":1,"message":"53","line":13,"column":25,"nodeType":"54","endLine":13,"endColumn":37},{"ruleId":"52","severity":1,"message":"53","line":15,"column":25,"nodeType":"54","endLine":15,"endColumn":37},{"ruleId":"55","severity":1,"message":"56","line":8,"column":8,"nodeType":"57","messageId":"58","endLine":8,"endColumn":16},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'CharInfo' is defined but never used.","Identifier","unusedVar"]